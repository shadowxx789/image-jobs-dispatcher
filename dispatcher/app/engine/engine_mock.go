// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package engine

import (
	"github.com/theshamuel/image-jobs-dispatcher/dispatcher/app/model"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
// 	func TestSomethingThatUsesInterface(t *testing.T) {
//
// 		// make and configure a mocked Interface
// 		mockedInterface := &InterfaceMock{
// 			GetJobFunc: func(id string) (*model.Job, error) {
// 				panic("mock out the GetJob method")
// 			},
// 			GetStatusJobFunc: func(id string) (model.JobStatus, error) {
// 				panic("mock out the GetStatusJob method")
// 			},
// 			SubmitJobFunc: func(job model.Job) (*model.Job, error) {
// 				panic("mock out the SubmitJob method")
// 			},
// 		}
//
// 		// use mockedInterface in code that requires Interface
// 		// and then make assertions.
//
// 	}
type InterfaceMock struct {
	// GetJobFunc mocks the GetJob method.
	GetJobFunc func(id string) (*model.Job, error)

	// GetStatusJobFunc mocks the GetStatusJob method.
	GetStatusJobFunc func(id string) (model.JobStatus, error)

	// SubmitJobFunc mocks the SubmitJob method.
	SubmitJobFunc func(job model.Job) (*model.Job, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetJob holds details about calls to the GetJob method.
		GetJob []struct {
			// ID is the id argument value.
			ID string
		}
		// GetStatusJob holds details about calls to the GetStatusJob method.
		GetStatusJob []struct {
			// ID is the id argument value.
			ID string
		}
		// SubmitJob holds details about calls to the SubmitJob method.
		SubmitJob []struct {
			// Job is the job argument value.
			Job model.Job
		}
	}
	lockGetJob       sync.RWMutex
	lockGetStatusJob sync.RWMutex
	lockSubmitJob    sync.RWMutex
}

// GetJob calls GetJobFunc.
func (mock *InterfaceMock) GetJob(id string) (*model.Job, error) {
	if mock.GetJobFunc == nil {
		panic("InterfaceMock.GetJobFunc: method is nil but Interface.GetJob was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetJob.Lock()
	mock.calls.GetJob = append(mock.calls.GetJob, callInfo)
	mock.lockGetJob.Unlock()
	return mock.GetJobFunc(id)
}

// GetJobCalls gets all the calls that were made to GetJob.
// Check the length with:
//     len(mockedInterface.GetJobCalls())
func (mock *InterfaceMock) GetJobCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetJob.RLock()
	calls = mock.calls.GetJob
	mock.lockGetJob.RUnlock()
	return calls
}

// GetStatusJob calls GetStatusJobFunc.
func (mock *InterfaceMock) GetStatusJob(id string) (model.JobStatus, error) {
	if mock.GetStatusJobFunc == nil {
		panic("InterfaceMock.GetStatusJobFunc: method is nil but Interface.GetStatusJob was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetStatusJob.Lock()
	mock.calls.GetStatusJob = append(mock.calls.GetStatusJob, callInfo)
	mock.lockGetStatusJob.Unlock()
	return mock.GetStatusJobFunc(id)
}

// GetStatusJobCalls gets all the calls that were made to GetStatusJob.
// Check the length with:
//     len(mockedInterface.GetStatusJobCalls())
func (mock *InterfaceMock) GetStatusJobCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetStatusJob.RLock()
	calls = mock.calls.GetStatusJob
	mock.lockGetStatusJob.RUnlock()
	return calls
}

// SubmitJob calls SubmitJobFunc.
func (mock *InterfaceMock) SubmitJob(job model.Job) (*model.Job, error) {
	if mock.SubmitJobFunc == nil {
		panic("InterfaceMock.SubmitJobFunc: method is nil but Interface.SubmitJob was just called")
	}
	callInfo := struct {
		Job model.Job
	}{
		Job: job,
	}
	mock.lockSubmitJob.Lock()
	mock.calls.SubmitJob = append(mock.calls.SubmitJob, callInfo)
	mock.lockSubmitJob.Unlock()
	return mock.SubmitJobFunc(job)
}

// SubmitJobCalls gets all the calls that were made to SubmitJob.
// Check the length with:
//     len(mockedInterface.SubmitJobCalls())
func (mock *InterfaceMock) SubmitJobCalls() []struct {
	Job model.Job
} {
	var calls []struct {
		Job model.Job
	}
	mock.lockSubmitJob.RLock()
	calls = mock.calls.SubmitJob
	mock.lockSubmitJob.RUnlock()
	return calls
}
